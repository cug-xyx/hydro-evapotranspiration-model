(. %>% mutate(
across(
matches(paste(.col_name)),
~str_split(., pattern = .col_name_sep)
)
) %>% across(
matches(paste(.col_value)),
~str_split(., pattern = .col_value_sep)
) %>% select(matches(paste(.col_name, .col_value, sep = '|'))) %>%
as.data.table() %>% pmap(
~(matrix(..2, nrow = 1, dimnames = list(1, ..1)) %>% as.data.table())
) %>% rbindlist(fill = T)
)
)
}
data.table(
FORMAT = c('B:C', 'A:B:C', 'B:C:D', 'A:C', 'A:B'),
value = c('2:3', '1:2:3', '2:3:4', '1:3', '1:2'),
other_var = 1
) %>% exact_separate(.col_name = 'FORMAT', .col_value = 'value')
exact_separate <- function(d, .col_name, .col_value,  # string
.col_name_sep = '[^[:alnum:]]+',
.col_value_sep = '[^[:alnum:]]+') {
d %>% cbind(
(. %>% mutate(
across(
matches(.col_name),
~str_split(., pattern = .col_name_sep)
),
across(
matches(.col_value),
~str_split(., pattern = .col_value_sep)
)
) %>% select(matches(paste(.col_name, .col_value, sep = '|'))) %>%
as.data.table() %>% pmap(
~(matrix(..2, nrow = 1, dimnames = list(1, ..1)) %>% as.data.table())
) %>% rbindlist(fill = T)
)
)
}
data.table(
FORMAT = c('B:C', 'A:B:C', 'B:C:D', 'A:C', 'A:B'),
value = c('2:3', '1:2:3', '2:3:4', '1:3', '1:2'),
other_var = 1
) %>% exact_separate(.col_name = 'FORMAT', .col_value = 'value')
exact_separate <- function(d, .col_name, .col_value,  # string
.col_name_sep = '[^[:alnum:]]+',
.col_value_sep = '[^[:alnum:]]+') {
d <- d%>% mutate(
across(
matches(.col_name),
~str_split(., pattern = .col_name_sep)
),
across(
matches(.col_value),
~str_split(., pattern = .col_value_sep)
)
) %>% select(matches(paste(.col_name, .col_value, sep = '|'))) %>%
as.data.table()
browser()
d %>% cbind(
(. %>% mutate(
across(
matches(.col_name),
~str_split(., pattern = .col_name_sep)
),
across(
matches(.col_value),
~str_split(., pattern = .col_value_sep)
)
) %>% select(matches(paste(.col_name, .col_value, sep = '|'))) %>%
as.data.table() %>% pmap(
~(matrix(..2, nrow = 1, dimnames = list(1, ..1)) %>% as.data.table())
) %>% rbindlist(fill = T)
)
)
}
data.table(
FORMAT = c('B:C', 'A:B:C', 'B:C:D', 'A:C', 'A:B'),
value = c('2:3', '1:2:3', '2:3:4', '1:3', '1:2'),
other_var = 1
) %>% exact_separate(.col_name = 'FORMAT', .col_value = 'value')
d
pmap(d, ~(matrix(..2, nrow = 1, dimnames = list(1, ..1)) %>% as.data.table()))
pmap(d, ~(matrix(..2, nrow = 1, dimnames = list(1, ..1)) %>% as.data.table())) %>% rbindlist(fill = T)
d
d %>% cbind(pmap(d, ~(matrix(..2, nrow = 1, dimnames = list(1, ..1)) %>% as.data.table())) %>% rbindlist(fill = T))
exact_separate <- function(d, .col_name, .col_value,  # string
.col_name_sep = '[^[:alnum:]]+',
.col_value_sep = '[^[:alnum:]]+') {
d <- d%>% mutate(
across(
matches(.col_name),
~str_split(., pattern = .col_name_sep)
),
across(
matches(.col_value),
~str_split(., pattern = .col_value_sep)
)
) %>% select(matches(paste(.col_name, .col_value, sep = '|'))) %>%
as.data.table()
browser()
d %>% cbind(
mutate(.,
across(
matches(.col_name),
~str_split(., pattern = .col_name_sep)
),
across(
matches(.col_value),
~str_split(., pattern = .col_value_sep)
)
) %>% select(matches(paste(.col_name, .col_value, sep = '|'))) %>%
as.data.table() %>% pmap(
~(matrix(..2, nrow = 1, dimnames = list(1, ..1)) %>% as.data.table())
) %>% rbindlist(fill = T)
)
}
data.table(
FORMAT = c('B:C', 'A:B:C', 'B:C:D', 'A:C', 'A:B'),
value = c('2:3', '1:2:3', '2:3:4', '1:3', '1:2'),
other_var = 1
) %>% exact_separate(.col_name = 'FORMAT', .col_value = 'value')
exact_separate <- function(d, .col_name, .col_value,  # string
.col_name_sep = '[^[:alnum:]]+',
.col_value_sep = '[^[:alnum:]]+') {
d <- d%>% mutate(
across(
matches(.col_name),
~str_split(., pattern = .col_name_sep)
),
across(
matches(.col_value),
~str_split(., pattern = .col_value_sep)
)
) %>% select(matches(paste(.col_name, .col_value, sep = '|'))) %>%
as.data.table()
browser()
d %>% cbind(
(. %>% mutate(
across(
matches(.col_name),
~str_split(., pattern = .col_name_sep)
),
across(
matches(.col_value),
~str_split(., pattern = .col_value_sep)
)
) %>% select(matches(paste(.col_name, .col_value, sep = '|'))) %>%
as.data.table() %>% pmap(
~(matrix(..2, nrow = 1, dimnames = list(1, ..1)) %>% as.data.table())
) %>% rbindlist(fill = T)
)
)
}
data.table(
FORMAT = c('B:C', 'A:B:C', 'B:C:D', 'A:C', 'A:B'),
value = c('2:3', '1:2:3', '2:3:4', '1:3', '1:2'),
other_var = 1
) %>% exact_separate(.col_name = 'FORMAT', .col_value = 'value')
data.table(
FORMAT = c('B:C', 'A:B:C', 'B:C:D', 'A:C', 'A:B'),
value = c('2:3', '1:2:3', '2:3:4', '1:3', '1:2'),
other_var = 1
) %>% exact_separate(.col_name = 'FORMAT', .col_value = 'value') %>% .$V2
exact_separate <- function(d, .col_name, .col_value,  # string
.col_name_sep = '[^[:alnum:]]+',
.col_value_sep = '[^[:alnum:]]+') {
d %>% cbind(
(. %>% mutate(
across(
matches(.col_name),
~str_split(., pattern = .col_name_sep)
),
across(
matches(.col_value),
~str_split(., pattern = .col_value_sep)
)
) %>% select(matches(paste(.col_name, .col_value, sep = '|'))) %>%
as.data.table() %>% pmap(
~(matrix(..2, nrow = 1, dimnames = list(1, ..1)) %>% as.data.table())
) %>% rbindlist(fill = T)
)
)
}
data.table(
FORMAT = c('B:C', 'A:B:C', 'B:C:D', 'A:C', 'A:B'),
value = c('2:3', '1:2:3', '2:3:4', '1:3', '1:2'),
other_var = 1
) %>% exact_separate(.col_name = 'FORMAT', .col_value = 'value') %>% .$V2
data.table(
FORMAT = c('B:C', 'A:B:C', 'B:C:D', 'A:C', 'A:B'),
value = c('2:3', '1:2:3', '2:3:4', '1:3', '1:2'),
other_var = 1
) %>% exact_separate(.col_name = 'FORMAT', .col_value = 'value')
exact_separate <- function(d, .col_name, .col_value,  # string
.col_name_sep = '[^[:alnum:]]+',
.col_value_sep = '[^[:alnum:]]+') {
d %>% cbind(
(. %>% mutate(
across(
matches(.col_name),
~str_split(., pattern = .col_name_sep)
),
across(
matches(.col_value),
~str_split(., pattern = .col_value_sep)
)
) %>% select({{.col_name}}, {{.col_value}}) %>%
as.data.table() %>% pmap(
~(matrix(..2, nrow = 1, dimnames = list(1, ..1)) %>% as.data.table())
) %>% rbindlist(fill = T)
)
)
}
data.table(
FORMAT = c('B:C', 'A:B:C', 'B:C:D', 'A:C', 'A:B'),
value = c('2:3', '1:2:3', '2:3:4', '1:3', '1:2'),
other_var = 1
) %>% exact_separate(.col_name = 'FORMAT', .col_value = 'value')
exact_separate <- function(d, .col_name, .col_value,  # string
.col_name_sep = '[^[:alnum:]]+',
.col_value_sep = '[^[:alnum:]]+') {
d %>% cbind(
(. %>% mutate(
across(
matches(.col_name),
~str_split(., pattern = .col_name_sep)
),
across(
matches(.col_value),
~str_split(., pattern = .col_value_sep)
)
) %>% select({{.col_name}}, {{.col_value}}) %>%
as.data.table() %>% pmap(
~(matrix(..2, nrow = 1, dimnames = list(1, ..1)) %>% as.data.table() %>% print())
) %>% rbindlist(fill = T)
)
)
}
exact_separate <- function(d, .col_name, .col_value,  # string
.col_name_sep = '[^[:alnum:]]+',
.col_value_sep = '[^[:alnum:]]+') {
d %>% cbind(
(. %>% mutate(
across(
matches(.col_name),
~str_split(., pattern = .col_name_sep)
),
across(
matches(.col_value),
~str_split(., pattern = .col_value_sep)
)
) %>% select({{.col_name}}, {{.col_value}}) %>%
as.data.table() %>% pmap(
~(matrix(..2, nrow = 1, dimnames = list(1, ..1)) %>% as.data.table() %>% sprintf())
) %>% rbindlist(fill = T)
)
)
}
separate2 <- function(d, .col_name, .col_value,  # string
.col_name_sep = '[^[:alnum:]]+',
.col_value_sep = '[^[:alnum:]]+') {
d %>% cbind(
(. %>% mutate(
across(
matches(.col_name),
~str_split(., pattern = .col_name_sep)
),
across(
matches(.col_value),
~str_split(., pattern = .col_value_sep)
)
) %>% select({{.col_name}}, {{.col_value}}) %>%
as.data.table() %>% pmap(
~(matrix(..2, nrow = 1, dimnames = list(1, ..1)) %>% as.data.table())
) %>% rbindlist(fill = T)
)
)
}
rm(exact_separate())
rm(exact_separate
)
data.table(
FORMAT = c('B:C', 'A:B:C', 'B:C:D', 'A:C', 'A:B'),
value = c('2:3', '1:2:3', '2:3:4', '1:3', '1:2'),
other_var = 1
) %>% separate2(.col_name = 'FORMAT', .col_value = 'value')
separate2 <- function(d, .col_name, .col_value,  # string
.col_name_sep = '[^[:alnum:]]+',
.col_value_sep = '[^[:alnum:]]+') {
d %>% cbind(
(. %>% mutate(
across(
matches(.col_name),
~str_split(., pattern = .col_name_sep)
),
across(
matches(.col_value),
~str_split(., pattern = .col_value_sep)
)
) %>% select({{.col_name}}, {{.col_value}}) %>%
as.data.table() %>% pmap(
~(matrix(..2, nrow = 1, dimnames = list(1, ..1)) %>% as.data.table())
) %>% rbindlist(fill = T)
)
)
}
data.table(
FORMAT = c('B:C', 'A:B:C', 'B:C:D', 'A:C', 'A:B'),
value = c('2:3', '1:2:3', '2:3:4', '1:3', '1:2'),
other_var = 1
) %>% separate2(.col_name = 'FORMAT', .col_value = 'value')
separate2 <- function(d, .col_name, .col_value,  # string
.col_name_sep = '[^[:alnum:]]+',
.col_value_sep = '[^[:alnum:]]+') {
d2 <- d %>% mutate(
across(
matches(.col_name),
~str_split(., pattern = .col_name_sep)
),
across(
matches(.col_value),
~str_split(., pattern = .col_value_sep)
)
) %>% select({{.col_name}}, {{.col_value}}) %>%
as.data.table() %>% pmap(
~(matrix(..2, nrow = 1, dimnames = list(1, ..1)) %>% as.data.table())
) %>% rbindlist(fill = T)
browser()
d %>% cbind(
(. %>% mutate(
across(
matches(.col_name),
~str_split(., pattern = .col_name_sep)
),
across(
matches(.col_value),
~str_split(., pattern = .col_value_sep)
)
) %>% select({{.col_name}}, {{.col_value}}) %>%
as.data.table() %>% pmap(
~(matrix(..2, nrow = 1, dimnames = list(1, ..1)) %>% as.data.table())
) %>% rbindlist(fill = T)
)
)
}
data.table(
FORMAT = c('B:C', 'A:B:C', 'B:C:D', 'A:C', 'A:B'),
value = c('2:3', '1:2:3', '2:3:4', '1:3', '1:2'),
other_var = 1
) %>% separate2(.col_name = 'FORMAT', .col_value = 'value')
d2
cbind(d, d2)
separate2 <- function(d, .col_name, .col_value,  # string
.col_name_sep = '[^[:alnum:]]+',
.col_value_sep = '[^[:alnum:]]+') {
# d2 <- d %>% mutate(
#   across(
#     matches(.col_name),
#     ~str_split(., pattern = .col_name_sep)
#   ),
#   across(
#     matches(.col_value),
#     ~str_split(., pattern = .col_value_sep)
#   )
# ) %>% select({{.col_name}}, {{.col_value}}) %>%
#   as.data.table() %>% pmap(
#     ~(matrix(..2, nrow = 1, dimnames = list(1, ..1)) %>% as.data.table())
#   ) %>% rbindlist(fill = T)
browser()
d %>% cbind(
mutate(.,
across(
matches(.col_name),
~str_split(., pattern = .col_name_sep)
),
across(
matches(.col_value),
~str_split(., pattern = .col_value_sep)
)
) %>% select({{.col_name}}, {{.col_value}}) %>%
as.data.table() %>% pmap(
~(matrix(..2, nrow = 1, dimnames = list(1, ..1)) %>% as.data.table())
) %>% rbindlist(fill = T)
)
}
data.table(
FORMAT = c('B:C', 'A:B:C', 'B:C:D', 'A:C', 'A:B'),
value = c('2:3', '1:2:3', '2:3:4', '1:3', '1:2'),
other_var = 1
) %>% separate2(.col_name = 'FORMAT', .col_value = 'value')
separate2 <- function(d, .col_name, .col_value,  # string
.col_name_sep = '[^[:alnum:]]+',
.col_value_sep = '[^[:alnum:]]+') {
d %>% cbind(
mutate(.,
across(
matches(.col_name),
~str_split(., pattern = .col_name_sep)
),
across(
matches(.col_value),
~str_split(., pattern = .col_value_sep)
)
) %>% select({{.col_name}}, {{.col_value}}) %>%
as.data.table() %>% pmap(
~(matrix(..2, nrow = 1, dimnames = list(1, ..1)) %>% as.data.table())
) %>% rbindlist(fill = T)
)
}
data.table(
FORMAT = c('B:C', 'A:B:C', 'B:C:D', 'A:C', 'A:B'),
value = c('2:3', '1:2:3', '2:3:4', '1:3', '1:2'),
other_var = 1
) %>% separate2(.col_name = 'FORMAT', .col_value = 'value')
fread('D:/code/data/test.gtf')
data_path <- 'D:/code/data/test.gtf'
fread(data_path, sep = '\t', skip = 4) %>% as_tibble()
fread(data_path, sep = '\t', skip = 4)
fread(data_path, sep = '\t', skip = 4
)[, `:=`(
V9 =
V9 %>%
str_split(';') %>%
map_chr(~col_check(., cols = col_list) %>% str_flatten(';')) %>%
str_replace_all(c('\"'='', '; '=';')) %>%
str_c(';', ., ';'),
value = str_extract_all(V9, '(?<= ).*?(?=;)') %>% map_chr(~str_flatten(., ';')),
colname = str_extract_all(V9, '(?<=;).*?(?= )') %>% map_chr(~str_flatten(., ';'))
)] %>%
separate2(.col_name = 'colname', .col_value = 'value',
.col_name_sep = ';', .col_value_sep = ';')
col_list <- c('gene_id', 'transcript_id', 'db_xref', 'gene', 'model_evidence',
'product', 'transcript_biotype', 'exon_number')
col_check <- function(string, cols) {
cols_combine = str_flatten(cols, '|')
re           = glue::glue('({cols_combine})')
detect_res   = str_detect(string, re)
return(string[which(detect_res)])
}
fread(data_path, sep = '\t', skip = 4
)[, `:=`(
V9 =
V9 %>%
str_split(';') %>%
map_chr(~col_check(., cols = col_list) %>% str_flatten(';')) %>%
str_replace_all(c('\"'='', '; '=';')) %>%
str_c(';', ., ';'),
value = str_extract_all(V9, '(?<= ).*?(?=;)') %>% map_chr(~str_flatten(., ';')),
colname = str_extract_all(V9, '(?<=;).*?(?= )') %>% map_chr(~str_flatten(., ';'))
)] %>%
separate2(.col_name = 'colname', .col_value = 'value',
.col_name_sep = ';', .col_value_sep = ';')
fread(data_path, sep = '\t', skip = 4
)[, `:=`(
V9 = V9 %>%
str_split(';') %>%
map_chr(~col_check(., cols = col_list) %>% str_flatten(';')) %>%
str_replace_all(c('\"'='', '; '=';')) %>%
str_c(';', ., ';'),
value = str_extract_all(V9, '(?<= ).*?(?=;)') %>% map_chr(~str_flatten(., ';')),
colname = str_extract_all(V9, '(?<=;).*?(?= )') %>% map_chr(~str_flatten(., ';'))
)][]
fread(data_path, sep = '\t', skip = 4
)[, V9 := V9 %>%
str_split(';') %>%
map_chr(~col_check(., cols = col_list) %>% str_flatten(';')) %>%
str_replace_all(c('\"'='', '; '=';')) %>%
str_c(';', ., ';')
][, `:=`(
value = str_extract_all(V9, '(?<= ).*?(?=;)') %>% map_chr(~str_flatten(., ';')),
colname = str_extract_all(V9, '(?<=;).*?(?= )') %>% map_chr(~str_flatten(., ';'))
)][] %>%
separate2(.col_name = 'colname', .col_value = 'value',
.col_name_sep = ';', .col_value_sep = ';')
fread(data_path, sep = '\t', skip = 4
)[, V9 := V9 %>%
str_split(';') %>%
map_chr(~col_check(., cols = col_list) %>% str_flatten(';')) %>%
str_replace_all(c('\"'='', '; '=';')) %>%
str_c(';', ., ';')
][, `:=`(
value = str_extract_all(V9, '(?<= ).*?(?=;)') %>% map_chr(~str_flatten(., ';')),
colname = str_extract_all(V9, '(?<=;).*?(?= )') %>% map_chr(~str_flatten(., ';'))
)][]
d <- fread(data_path, sep = '\t', skip = 4
)[, V9 := V9 %>%
str_split(';') %>%
map_chr(~col_check(., cols = col_list) %>% str_flatten(';')) %>%
str_replace_all(c('\"'='', '; '=';')) %>%
str_c(';', ., ';')
][, `:=`(
value = str_extract_all(V9, '(?<= ).*?(?=;)') %>% map_chr(~str_flatten(., ';')),
colname = str_extract_all(V9, '(?<=;).*?(?= )') %>% map_chr(~str_flatten(., ';'))
)][]
d
d %>%
separate2(.col_name = 'colname', .col_value = 'value',
.col_name_sep = ';', .col_value_sep = ';')
rm(list = ls())
gc()
data.table(a = 1)
data.table(a = 1) %>% mutate(b = 2)
data.table(a = 1) %>% mutate(b = 2) %>% select(a)
usethis::use_package('data.table')
?cbind
?mutate
across
usethis::use_package('purrr')
devtools::document()
devtools::check()
