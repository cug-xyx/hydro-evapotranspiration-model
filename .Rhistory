cal_gma <- function(Pa = NULL,
lambda = NULL) {
if (is.null(lambda)) lambda = 2.45  # latent heat of vaporization [MJ kg-1]
if (is.null(Pa))     Pa     = 101.3 # a standard atmospheric pressure [kPa]
cp      = 0.001013 # specific heat at constant pressure [MJ kg-1 deg-1]
epsilon = 0.622    # ratio molecular weight of water vapor/dry air
gma = (cp * Pa) / (epsilon * lambda) # psychrometric constant [kPa deg-1]
return(gma)
}
cal_gma()
rm(cal_gma())
rm(cal_gma
)
inverse = function (f, lower = -100, upper = 100) {
function (y) uniroot((function (x) f(x) - y), lower = lower, upper = upper)[1]
}
square_inv <- inverse(function(x) x + 1, 0.001, 100)
square_inv(1)
square_inv(2)
square_inv(5)
square_inv <- inverse(function(x) x ^3, 0.001, 100)
square_inv(8)
square_inv(64)
square_inv(5)
square_inv(125)
?uniroot
inverse = function (f, lower = -100, upper = 100) {
function (y) uniroot((function (x) f(x) - y),
lower = lower,
upper = upper,
tol = 1e-05)[1]
}
square_inv <- inverse(function(x) x ^3, 0.001, 100)
square_inv(125)
square_inv(126)
square_inv(127)
square_inv(16)
square_inv(64)
square_inv(64)
square_inv(64) %>% class()
library(tidyverse)
square_inv(64) %>% class()
square_inv(64) %>% unlist()
square_inv(64) %>% unlist() %>% class()
square_inv(64) %>% unlist() %>% as.numeric()
rm(square_inv())
rm(square_inv
)
rm(inverse)
cal_Twb <- function(Td,
Ta,
gma = NULL) {
if (is.null(gma)) gma = cal_gma()
es_Td = cal_es(Td)
# 0.6108 * exp((17.27 * Twb) / (Twb + 237.3)) + gma * Twb = es_Td + gma * Ta
func <- function(Twb) 0.6108 * exp((17.27 * Twb) / (Twb + 237.3)) + gma * Twb
inv <- inverse(func, 0.0001, 100)
inv(es_Td + gma * Ta) %>% unlist() %>% as.numeric()
}
rm(cal_Twb)
cal_Twb <- function(Td,
Ta,
gma = NULL) {
if (is.null(gma)) gma = cal_gma()
es_Td = cal_es(Td)
# 0.6108 * exp((17.27 * Twb) / (Twb + 237.3)) + gma * Twb = es_Td + gma * Ta
func <- function(Twb) 0.6108 * exp((17.27 * Twb) / (Twb + 237.3)) + gma * Twb
inv <- inverse(func, 0.0001, 100)
inv(es_Td + gma * Ta) %>% unlist() %>% as.numeric()
}
cal_Twb(1, 1)
cal_es <- function(Tair) {
# saturation vapour pressure at the air temperature Tair [kPa]
es = 0.6108 * exp((17.27 * Tair) / (Tair + 237.3))
}
cal_gma <- function(Pa = NULL,
lambda = NULL) {
if (is.null(lambda)) lambda = 2.45  # latent heat of vaporization [MJ kg-1]
if (is.null(Pa))     Pa     = 101.3 # a standard atmospheric pressure [kPa]
cp      = 0.001013 # specific heat at constant pressure [MJ kg-1 deg-1]
epsilon = 0.622    # ratio molecular weight of water vapor/dry air
gma = (cp * Pa) / (epsilon * lambda) # psychrometric constant [kPa deg-1]
return(gma)
}
cal_Twb(1, 1)
inverse = function (f,
lower = -100,
upper = 100) {
function (y) uniroot((function (x) f(x) - y),
lower = lower, upper = upper,
tol = 1e-05 # iterative accuracy
)[1]
}
cal_Twb(1, 1)
cal_Twb(1, 2)
cal_Twb(c(1, 1), c(2, 2))
cal_Twb <- function(Td,
Ta,
gma = NULL) {
if (is.null(gma)) gma = cal_gma()
es_Td = cal_es(Td) # es at dew-point temperature [kPa]
# function
# 0.6108 * exp((17.27 * Twb) / (Twb + 237.3)) + gma * Twb = es_Td + gma * Ta
# solve using the inverse function
func <- function(Twb) 0.6108 * exp((17.27 * Twb) / (Twb + 237.3)) + gma * Twb
inv <- inverse(func, 0.0001, 100)
tibble(Td, Ta) %>%
mutate(Twb = inv(es_Td + gma * Ta) %>% unlist() %>% as.numeric())
# inv(es_Td + gma * Ta) %>% unlist() %>% as.numeric()
}
cal_Twb(c(1, 1), c(2, 2))
cal_Twb <- function(Td,
Ta,
gma = NULL) {
if (is.null(gma)) gma = cal_gma()
es_Td = cal_es(Td) # es at dew-point temperature [kPa]
# function
# 0.6108 * exp((17.27 * Twb) / (Twb + 237.3)) + gma * Twb = es_Td + gma * Ta
# solve using the inverse function
func <- function(Twb) 0.6108 * exp((17.27 * Twb) / (Twb + 237.3)) + gma * Twb
inv <- inverse(func, 0.0001, 100)
tibble(Td, Ta, gma, es_Td) %>%
mutate(Twb = inv(es_Td + gma * Ta) %>% unlist() %>% as.numeric())
# inv(es_Td + gma * Ta) %>% unlist() %>% as.numeric()
}
cal_Twb(c(1, 1), c(2, 2))
cal_Twb <- function(Td,
Ta,
gma = NULL) {
if (is.null(gma)) gma = cal_gma()
es_Td = cal_es(Td) # es at dew-point temperature [kPa]
# function
# 0.6108 * exp((17.27 * Twb) / (Twb + 237.3)) + gma * Twb = es_Td + gma * Ta
# solve using the inverse function
func <- function(Twb) 0.6108 * exp((17.27 * Twb) / (Twb + 237.3)) + gma * Twb
inv <- inverse(func, 0.0001, 100)
tibble(TD = Td, TA = Ta, GMA = gma, ESTD = es_Td) %>%
mutate(TWB = inv(ESTD + GMA * TA) %>% unlist() %>% as.numeric())
# inv(es_Td + gma * Ta) %>% unlist() %>% as.numeric()
}
cal_Twb(c(1, 1), c(2, 2))
func <- function(x) x+1
inv <- inverse(func, 0.001, 1000)
inv(1)
inv(2)
inv(3)
inv(c(1, 2))
for (i in c(1, 2)) inv(i)
for (i in c(2, 2)) inv(i)
for (i in c(2, 2)) inv(i) %>% print()
for (i in c(2, 4)) inv(i) %>% print()
tibble(num = c(5, 6))
tibble(num = c(5, 6)) %>%
mutate(res = inv(num))
tibble(num = c(5, 6)) %>%
mutate(res = inv(num) %>% unlink())
sapply(c(5, 6), FUN = inv(x))
sapply(c(5, 6), FUN = inv)
sapply(c(5, 6), FUN = inv) %>% class()
cal_Twb <- function(Td,
Ta,
gma = NULL) {
if (is.null(gma)) gma = cal_gma()
es_Td = cal_es(Td) # es at dew-point temperature [kPa]
# function
# 0.6108 * exp((17.27 * Twb) / (Twb + 237.3)) + gma * Twb = es_Td + gma * Ta
# solve using the inverse function
func <- function(Twb) 0.6108 * exp((17.27 * Twb) / (Twb + 237.3)) + gma * Twb
y = es_td + gma * Ta
inv <- inverse(func, 0.0001, 100)
# tibble(TD = Td, TA = Ta, GMA = gma, ESTD = es_Td) %>%
#   mutate(TWB = inv(ESTD + GMA * TA) %>% unlist() %>% as.numeric())
# inv(es_Td + gma * Ta) %>% unlist() %>% as.numeric()
sapply(y, FUN = inv) %>% unlist()
}
cal_Twb(c(1, 1), c(2, 2))
cal_Twb <- function(Td,
Ta,
gma = NULL) {
if (is.null(gma)) gma = cal_gma()
es_Td = cal_es(Td) # es at dew-point temperature [kPa]
# function
# 0.6108 * exp((17.27 * Twb) / (Twb + 237.3)) + gma * Twb = es_Td + gma * Ta
# solve using the inverse function
func <- function(Twb) 0.6108 * exp((17.27 * Twb) / (Twb + 237.3)) + gma * Twb
y = es_Td + gma * Ta
inv <- inverse(func, 0.0001, 100)
# tibble(TD = Td, TA = Ta, GMA = gma, ESTD = es_Td) %>%
#   mutate(TWB = inv(ESTD + GMA * TA) %>% unlist() %>% as.numeric())
# inv(es_Td + gma * Ta) %>% unlist() %>% as.numeric()
sapply(y, FUN = inv) %>% unlist()
}
cal_Twb(c(1, 1), c(2, 2))
cal_Twb <- function(Td,
Ta,
gma = NULL) {
if (is.null(gma)) gma = cal_gma()
es_Td = cal_es(Td) # es at dew-point temperature [kPa]
# function
# 0.6108 * exp((17.27 * Twb) / (Twb + 237.3)) + gma * Twb = es_Td + gma * Ta
# solve using the inverse function
func <- function(Twb) 0.6108 * exp((17.27 * Twb) / (Twb + 237.3)) + gma * Twb
y = es_Td + gma * Ta
inv <- inverse(func, 0.0001, 100)
# tibble(TD = Td, TA = Ta, GMA = gma, ESTD = es_Td) %>%
#   mutate(TWB = inv(ESTD + GMA * TA) %>% unlist() %>% as.numeric())
# inv(es_Td + gma * Ta) %>% unlist() %>% as.numeric()
sapply(y, FUN = inv) %>% unlist() %>% as.numeric()
}
cal_Twb(c(1, 1), c(2, 2))
rm(list = ls())
gc()
devtools::load_all(".")
cal_Twb(1, 2)
cal_Twb(c(1, 1), c(2,3))
devtools::load_all(".")
cal_Twb(c(1, 1), c(2,3))
?hydroTools::cal_slope
hydroTools::cal_slope
hydroTools::cal_U2
1 + NULl
1 + NULl
1 + NULL
?hydroTools::cal_ea
hydroTools::cal_ea
devtools::load_all(".")
cal_ea(20)
cal_ea(20, q = 0.5)
cal_Tws <- function(Rn,
Ep,
Ta,
ea,
gma = NULL,
G = NULL) {
if (is.null(gma)) gma = cal_gma()
if (is.null(G)) {
energy = Rn
} else {
energy = Rn - G
}
beta_p = (energy - Ep) / Ep # bowen ratio of the well-watered patch
# function
# beta_p = gma * (Tws - Ta)/(0.6108 * exp((17.27 * Twb) / (Twb + 237.3)) - ea)
# solve using the inverse function
func <- function(Twb) beta_p * 0.6108 * exp((17.27*Twb)/(Twb+237.3)) - gma*Tws
y = beta_p * ea - gma * Ta
inv <- inverse(func, 0.0001, 100)
sapply(y, FUN = inv)
}
rm(list = ls())
devtools::load_all(".")
cal_Tws(50, 4, 15, 0.7)
devtools::load_all(".")
cal_Tws(50, 4, 15, 0.7)
devtools::load_all(".")
cal_Tws(50, 4, 15, 0.7)
cal_Ep_max
cal_Tdry
cal_Ep_max
cal_Ep
devtools::load_all(".")
cal_Ep
cal_Ew
cal_Tws
cal_Ew
2**2
2^2
2 * 3^3
devtools::load_all(".")
cal_ea
cal_Twb
cal_Tdry
cal_Ep_max
cal_Ep
cal_Tws
cal_Ew
hydroTools::cal_lambda
